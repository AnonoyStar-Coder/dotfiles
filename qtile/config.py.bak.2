from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
import subprocess
import os

mod = "mod4"
terminal = guess_terminal()


def get_volume():
    try:
        output = subprocess.check_output(["wpctl", "get-volume", "@DEFAULT_AUDIO_SINK@"], text=True)
        parts = output.split()
        volume = float(parts[1])
        muted = "MUTED" in output.upper()

        if muted or volume == 0.0:
            return "  0%"
        elif volume < 0.3:
            return f"  {int(volume * 100)}%"
        elif volume < 0.7:
            return f"  {int(volume * 100)}%"
        else:
            return f"  {int(volume * 100)}%"
    except Exception:
        return "??%"


def separator_left(fg, bg):
    return widget.TextBox(text='', fontsize=28, padding=0, foreground=fg, background=bg)


def separator_right(fg, bg):
    return widget.TextBox(text='', fontsize=28, padding=0, foreground=fg, background=bg)


widget_defaults = dict(
    font="Lilex Nerd Font",
    fontsize=18,
    padding=6,
)

extension_defaults = widget_defaults.copy()

screens = [
    Screen(
        bottom=bar.Bar([
            separator_left("#3c3836", "#1d2021"),
            widget.GroupBox(
                background="#3c3836",
                highlight_method="line",
                inactive="#d5c4a1",
                this_current_screen_border="#fe8019",
            ),

            separator_left("#665c54", "#3c3836"),
            widget.WindowName(background="#665c54", foreground="#fbf1c7", max_chars=40),

            separator_left("#bdae93", "#665c54"),
            widget.GenPollText(
                func=get_volume,
                update_interval=1,
                fmt=" {} ",
                background="#bdae93",
                foreground="#1d2021",
            ),

            separator_left("#d5c4a1", "#bdae93"),
            widget.Battery(
                background="#d5c4a1",
                foreground="#1d2021",
                format=" {char} {percent:2.0%} ",
                charge_char="",
                discharge_char="",
                empty_char="",
                full_char="",
            ),

            separator_left("#ebdbb2", "#d5c4a1"),
            widget.Clock(
                background="#ebdbb2",
                foreground="#1d2021",
                format="  %I:%M %p    %a, %d %b"
            ),

            separator_right("#ebdbb2", "#1d2021"),
        ],
        32,
        background="#1d2021"
        )
    )
]

layouts = [
    layout.Columns(border_focus_stack=["#fabd2f", "#3c3836"], border_width=3),
    layout.Max(),
]

mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(float_rules=[*layout.Floating.default_float_rules])
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True
auto_minimize = True
wl_input_rules = None
wl_xcursor_theme = None
wl_xcursor_size = 24
wmname = "LG3D"
